<!DOCTYPE html>
<html>
<head>
  <title>График Смен и Выходных (Лунная Дымка)</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-family: 'Noto Sans', sans-serif;
      background-color: #303030;
      margin: 0;
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      color: #bdbdbd;
      font-size: 16px;
    }

    h1 {
      color: #81d4fa;
      margin: 30px 0;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
      font-size: 2.2rem;
      text-align: center;
    }

    .button-container {
      display: flex;
      justify-content: center;
      margin-bottom: 30px;
      gap: 20px;
      flex-wrap: wrap;
      width: 100%;
      max-width: 1200px;
    }

    .schedule-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      margin: 20px;
      gap: 30px;
      width: 100%;
    }

    .schedule {
      max-width: 380px;
      width: 100%;
      border: 2px solid #424242;
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
      border-radius: 12px;
      background-color: #424242;
      display: flex;
      flex-direction: column;
    }

    .month-name {
      text-align: center;
      padding: 16px;
      background-color: #546e7a;
      color: #e0f7fa;
      font-weight: bold;
      font-size: 22px;
      border-bottom: 2px solid #424242;
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
    }

    .week {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
    }

    .day {
      position: relative;
      aspect-ratio: 1/1;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      padding: 5px;
      border: none;
      font-size: 16px;
      color: #9e9e9e;
      box-sizing: border-box;
    }

    .day-number {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 30px;
      font-weight: bold;
      z-index: 1;
    }

    .shift.day {
      background-color: #78909c;
      color: #263238;
    }

    .shift.night {
      background-color: #263238;
      color: #b0bec5;
    }

    .weekend {
      background-color: #546e7a;
      color: #b0bec5;
    }

    .today {
      background-color: #607d8b;
      text-shadow: 0 0 5px #b2ebf2;
      color: #b2ebf2;
      position: relative;
      z-index: 10;
    }

    .today::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      outline: 3px solid #b2ebf2;
      outline-offset: -3px;
      box-shadow: 0 0 12px #b2ebf2;
      pointer-events: none;
      z-index: 5;
    }

    .today .day-number {
      color: #b2ebf2;
      text-shadow: 0 0 8px #b2ebf2;
      font-weight: bold;
    }

    .navigation-button {
      padding: 16px 32px;
      background-color: #546e7a;
      color: #e0f7fa;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
      font-size: 20px;
      font-weight: bold;
      transition: transform 0.2s, background-color 0.2s;
    }

    .navigation-button:hover {
      background-color: #607d8b;
      transform: translateY(-2px);
    }

    .current-time-display {
      text-align: center;
      font-size: 22px;
      font-weight: bold;
      margin: 30px 0;
      padding: 15px 30px;
      border-radius: 10px;
      background-color: #424242;
      max-width: 380px;
      width: 100%;
      box-sizing: border-box;
      transition: color 0.5s ease, text-shadow 0.5s ease;
    }

    .free-time {
      color: #b9f6ca; /* Зеленый для свободного времени */
      text-shadow: 0 0 12px rgba(185, 246, 202, 0.7);
    }

    .busy-time {
      color: #ff8a80; /* Красный для рабочего времени */
      text-shadow: 0 0 12px rgba(255, 138, 128, 0.7);
    }

    @media (max-width: 1200px) {
      .schedule {
        max-width: 350px;
      }
      .current-time-display {
        max-width: 350px;
      }
    }

    @media (max-width: 992px) {
      .schedule {
        max-width: 320px;
      }
      .current-time-display {
        max-width: 320px;
      }
    }

    @media (max-width: 768px) {
      .schedule {
        max-width: 100%;
      }
      .current-time-display {
        max-width: 100%;
      }
      .button-container {
        flex-direction: column;
        align-items: center;
      }
      .navigation-button {
        width: 100%;
        max-width: none;
        padding: 20px;
        font-size: 22px;
      }
    }

    @media (max-width: 480px) {
      .day-number {
        font-size: 24px;
      }
      .navigation-button {
        font-size: 18px;
        padding: 18px;
      }
    }
  </style>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans:wght@400;700&display=swap" rel="stylesheet">
</head>
<body>

  <h1>График Смен и Выходных</h1>

  <div class="button-container">
    <button id="moveBackButton" class="navigation-button">Предыдущие 3 месяца</button>
    <button id="moveForwardButton" class="navigation-button">Следующие 3 месяца</button>
  </div>

  <div id="scheduleContainer" class="schedule-container"></div>

  <div id="currentTimeDisplay" class="current-time-display"></div>

  <script>
    let currentStartDate = new Date();
    // Динамическая начальная дата (первый день дневной смены)
    let startCycleDate = new Date();
    startCycleDate.setDate(1); // Начало с первого дня текущего месяца
    startCycleDate.setHours(0, 0, 0, 0);

    const shiftPattern = [
      { type: 'day' },
      { type: 'night' },
      { type: 'weekend' },
      { type: 'weekend' }
    ];

    // Найти ближайшую дневную смену
    function findNearestDayShift() {
      const today = new Date();
      let testDate = new Date(today);
      testDate.setDate(1);
      testDate.setHours(0, 0, 0, 0);
      
      // Ищем в пределах 10 дней вперед
      for (let i = 0; i < 10; i++) {
        const diffDays = Math.floor((testDate - startCycleDate) / (1000 * 60 * 60 * 24));
        const shiftIndex = diffDays % shiftPattern.length;
        
        if (shiftPattern[shiftIndex].type === 'day') {
          return new Date(testDate);
        }
        testDate.setDate(testDate.getDate() + 1);
      }
      return new Date(today); // Возвращаем сегодняшнюю дату, если не нашли
    }

    // Обновить начальную дату цикла
    startCycleDate = findNearestDayShift();

    function getDayType(date) {
      // Приводим даты к началу суток
      const start = new Date(startCycleDate);
      start.setHours(0, 0, 0, 0);
      
      const current = new Date(date);
      current.setHours(0, 0, 0, 0);
      
      const diffTime = current - start;
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      const shiftIndex = diffDays % shiftPattern.length;
      
      return shiftPattern[shiftIndex].type;
    }

    function getDaySchedule(dayType) {
      switch(dayType) {
        case 'day':
          return [
            { start: '07:00', end: '19:00', status: 'busy' },
            { start: '19:30', end: '23:59', status: 'free' }
          ];
        case 'night':
          return [
            { start: '00:00', end: '07:00', status: 'busy' },
            { start: '07:00', end: '17:00', status: 'free' }
          ];
        case 'weekend':
          return [
            { start: '00:00', end: '23:59', status: 'free' }
          ];
        default:
          return [];
      }
    }

    function createSchedule(year, month, shiftPattern, shiftIndex) {
      const daysInMonth = new Date(year, month + 1, 0).getDate();
      const firstDayOfMonth = new Date(year, month, 1).getDay();
      const monthName = new Date(year, month, 1).toLocaleDateString('ru-RU', { month: 'long' });
      const today = new Date();
      const todayDate = today.getDate();
      const todayMonth = today.getMonth();
      const todayYear = today.getFullYear();

      const schedule = document.createElement('div');
      schedule.classList.add('schedule');

      const monthHeader = document.createElement('div');
      monthHeader.classList.add('month-name');
      monthHeader.textContent = `${monthName} ${year}`;
      schedule.appendChild(monthHeader);

      let currentShiftIndex = shiftIndex;
      let totalDays = daysInMonth + firstDayOfMonth;
      let numWeeks = Math.ceil(totalDays / 7);

      for (let week = 0; week < numWeeks; week++) {
        let weekElement = document.createElement('div');
        weekElement.classList.add('week');

        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {
          let dayElement = document.createElement('div');
          dayElement.classList.add('day');

          let dayNumber = (week * 7) + dayOfWeek - firstDayOfMonth + 1;

          if (dayNumber > 0 && dayNumber <= daysInMonth) {
            const date = new Date(year, month, dayNumber);
            
            const dayNumberDiv = document.createElement('div');
            dayNumberDiv.classList.add('day-number');
            dayNumberDiv.textContent = dayNumber;
            dayElement.appendChild(dayNumberDiv);

            const shift = shiftPattern[currentShiftIndex];
            const dayType = shift.type;

            if (dayType === 'day' || dayType === 'night') {
              dayElement.classList.add('shift');
              dayElement.classList.add(dayType);
            } else {
              dayElement.classList.add('weekend');
            }

            if (year === todayYear && month === todayMonth && dayNumber === todayDate) {
              dayElement.classList.add('today');
            }

            currentShiftIndex = (currentShiftIndex + 1) % shiftPattern.length;
          } else {
            dayElement.textContent = "";
          }
          weekElement.appendChild(dayElement);
        }
        schedule.appendChild(weekElement);
      }

      return { schedule, nextShiftIndex: currentShiftIndex };
    }

    function updateSchedules(startDate) {
      const scheduleContainer = document.getElementById('scheduleContainer');
      scheduleContainer.innerHTML = '';

      let currentYear = startDate.getFullYear();
      let currentMonth = startDate.getMonth();

      // Определяем начальный индекс смены для первого дня месяца
      const firstDay = new Date(currentYear, currentMonth, 1);
      const diffDays = Math.floor((firstDay - startCycleDate) / (1000 * 60 * 60 * 24));
      let shiftIndex = diffDays % shiftPattern.length;
      if (shiftIndex < 0) shiftIndex += shiftPattern.length;

      for (let i = 0; i < 3; i++) {
        const scheduleData = createSchedule(currentYear, currentMonth, shiftPattern, shiftIndex);
        scheduleContainer.appendChild(scheduleData.schedule);
        shiftIndex = scheduleData.nextShiftIndex;

        currentMonth++;
        if (currentMonth > 11) {
          currentMonth = 0;
          currentYear++;
        }
      }

      currentStartDate = startDate;
    }

    const moveForwardButton = document.getElementById("moveForwardButton");
    const moveBackButton = document.getElementById("moveBackButton");
    const currentTimeDisplay = document.getElementById("currentTimeDisplay");

    moveForwardButton.addEventListener("click", function() {
      let nextMonth = new Date(currentStartDate);
      nextMonth.setMonth(nextMonth.getMonth() + 3);
      updateSchedules(nextMonth);
    });

    moveBackButton.addEventListener("click", function() {
      let nextMonth = new Date(currentStartDate);
      nextMonth.setMonth(nextMonth.getMonth() - 3);
      updateSchedules(nextMonth);
    });

    function isTimeInRange(current, start, end) {
      const currentTime = current.getHours() * 60 + current.getMinutes();
      const startParts = start.split(':');
      const endParts = end.split(':');
      
      const startTime = parseInt(startParts[0]) * 60 + parseInt(startParts[1]);
      const endTime = parseInt(endParts[0]) * 60 + parseInt(endParts[1]);
      
      if (endTime < startTime) {
        return currentTime >= startTime || currentTime < endTime;
      }
      return currentTime >= startTime && currentTime < endTime;
    }

    function updateCurrentTime() {
      const now = new Date();
      let hours = now.getHours();
      const minutes = now.getMinutes();
      const ampm = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12;
      hours = hours ? hours : 12;
      const timeString = `${hours}:${String(minutes).padStart(2, '0')} ${ampm}`;

      const dayType = getDayType(now);
      const schedule = getDaySchedule(dayType);
      
      let isFree = false;
      for (const interval of schedule) {
        if (isTimeInRange(now, interval.start, interval.end)) {
          isFree = (interval.status === 'free');
          break;
        }
      }

      currentTimeDisplay.textContent = `Текущее время: ${timeString}`;
      currentTimeDisplay.className = 'current-time-display';
      currentTimeDisplay.classList.add(isFree ? 'free-time' : 'busy-time');
      
      // Отладочная информация
      console.log(`Тип дня: ${dayType}`);
      console.log(`Расписание: ${JSON.stringify(schedule)}`);
      console.log(`Свободен: ${isFree}`);
    }

    setInterval(updateCurrentTime, 1000);

    // Инициализация после установки начальной даты
    updateSchedules(new Date());
    updateCurrentTime();
  </script>
</body>
</html>
